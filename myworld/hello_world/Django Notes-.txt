Django Notes-

1. MVT 
2. Structure of Django: Project -> Apps -> WebPages  (You cannot have a web page created with Django without an app.)
3. App in Django - An app is a web application that has a specific meaning in your project, like a home page, a contact form, or a members database.
4. Django views are Python functions that takes http requests and returns http response, like HTML documents. A web page that uses Django is full of views with different tasks an missions.  	Views are usually put in a file called views.py located on your app's folder.
5. your project's urls.py is the central URL configuration that includes URLs from different apps. The members app's urls.py defines URL patterns specific to the members app and handles   	URLs under 'members/'
6. py manage.py migrate is a command used to update your database schema to match the current state of your Django project's models.
7. Templates- htmls
8. Models-In Django, data is created in objects, called Models, and is actually tables in a database.
9. SQLite Database
When we created the Django project, we got an empty SQLite database.

It was created in the my_tennis_club root folder, and has the filename db.sqlite3.

By default, all Models created in the Django project will be created as tables in this database.

10. flow 8
	View SQL
	As a side-note: you can view the SQL statement that were executed from the migration above. All you have to do is to run this command, with the migration number:

	py manage.py sqlmigrate members 0001

11. Django Insert ::: To open a Python shell, py manage.py shell
			from members.models import Member // import the model
			Member.objects.all() o/p-> <QuerySet []> A QuerySet is a collection of data from a database
			Add a record to the table,

				>>> member = Member(firstname='Emil', lastname='Refsnes')
				>>> member.save()
				>>> Member.objects.all()                                  
					<QuerySet [<Member: Member object (1)>]>
				>>> Member.objects.all().values()
					<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'}]>
		Multiple records
		>>> member1 = Member(firstname='Tobias', lastname='Refsnes')
		>>> member2 = Member(firstname='Linus', lastname='Refsnes')
		>>> member3 = Member(firstname='Lene', lastname='Refsnes')
		>>> member4 = Member(firstname='Stale', lastname='Refsnes')
		>>> member5 = Member(firstname='Jane', lastname='Doe')
		>>> members_list = [member1, member2, member3, member4, member5]
		>>> for x in members_list:
		>>>   x.save()

12. Update Records
	To update records that are already in the database, we first have to get the record we want to update:

		>>> from members.models import Member
		>>> x = Member.objects.all()[4]
	x will now represent the member at index 4, which is "Stale Refsnes", but to make sure, let us see if that is correct:

		>>> x.firstname
			'Stale'
		>>> x.firstname = "Stalikken"
		>>> x.save()
	Execute this command to see if the Member table got updated:

		>>> Member.objects.all().values()
13. Delete
	>>> x.delete()
14. Update model
	To update model(ADDING A FIELD) we have to handle null case if we already have some data in DB. joined_date = models.DateField(null=True)
	Addinf data to this 
		from members.models import Member
		>>> x = Member.objects.all()[0]
		>>> x.phone = 5551234
		>>> x.joined_date = '2022-01-05'
		>>> x.save()

15. Display Data









Work Flow
1. Install python
2. Create a virtual environment. Command: py -m venv myworld
3. Install Django Command: py -m pip install Django
4. Navigate to myworld folder and create django project Command: django-admin startproject my_tennis_club.
   It will make following things
	my_tennis_club
    		-manage.py
    		-my_tennis_club/
        		__init__.py
        		asgi.py
        		settings.py
        		urls.py
        		wsgi.py

5. Goto my_tennis_club and Start a server (py manage.py runserver).
6. Create an app (py manage.py startapp members) inside my_tennis_club project (outer one)
	Result
	my_tennis_club
    		-manage.py
    		-my_tennis_club/
			__init__.py
        		asgi.py
        		settings.py
        		urls.py
        		wsgi.py
    		-members/
        	   -migrations/
           		- __init__.py
        	   -__init__.py
        	   -admin.py
        	   -apps.py
        	   -models.py
        	   -tests.py
         	   -views.py

7. In order to make a webpage in members
	Make template
	Make views and use above template
	define urlpatterns in member app as well as main applcation
	change seetings.py
8.  Create models in models.py in member applcation
	Migrate
	Now when we have described a Model in the models.py file, we must run a command to actually create the table in the database.

		Navigate to the /my_tennis_club/ folder and run this command:
			py manage.py makemigrations members
		
		Django creates a file describing the changes and stores the filE in the /migrations/ folder:
	The table is not created yet, you will have to run one more command, then Django will create and execute an SQL statement, based on the content of the new file in the /migrations/ 	folder. Now you have a Member table in you database!
	ADD UPDATE DEL DATA,  UPDATE MODEL
9. Displaying model 
	my_tennis_club/members/templates/all_members.html:
-------------------------Template------------------------
<!DOCTYPE html>
<html>
<body>

<h1>Members</h1>
  
<ul>
  {% for x in mymembers %}
    <li>{{ x.firstname }} {{ x.lastname }}</li>
  {% endfor %}
</ul>

</body>
</html>
 --------------------- View -----------------------------
my_tennis_club/members/views.py:

from django.http import HttpResponse
from django.template import loader
from .models import Member

def members(request):
  mymembers = Member.objects.all().values()
  template = loader.get_template('all_members.html')
  context = {
    'mymembers': mymembers,
  }
  return HttpResponse(template.render(context, request)

--------------------Desc----------------------
The members view does the following:

Creates a mymembers object with all the values of the Member model.
Loads the all_members.html template.
Creates an object containing the mymembers object.
Sends the object to the template.
Outputs the HTML that is rendered by the template.

py manage.py runserver
In the browser window, type 127.0.0.1:8000/members/ in the address bar.

10. Diplaying other details 

	Follow M8 Commit
------view----------
def details(request, id):
  mymember = Member.objects.get(id=id)
  template = loader.get_template('details.html')
  context = {
    'mymember': mymember,
  }
  return HttpResponse(template.render(context, request)) 
 
 
The details view does the following:

Gets the id as an argument.
Uses the id to locate the correct record in the Member table.
loads the details.html template.
Creates an object containing the member.
Sends the object to the template.
Outputs the HTML that is rendered by the template.

----------url------
Now we need to make sure that the /details/ url points to the correct view, with id as a parameter.
path('members/details/<int:id>', views.details, name='details')


11. Add Master Template
	The extends Ta

Django provides a way of making a "parent template" that you can include in all pages to do the stuff that is the same in all pages.

Start by creating a template called master.html, with all the necessary HTML elements:
-------------master.html-----------------
<!DOCTYPE html>
<html>
<head>
  <title>{% block title %}{% endblock %}</title>
</head>
<body>

{% block content %}
{% endblock %}

</body>
</html>

They are placeholders, telling Django to replace this block with content from other sources.

-----------------all_members.html-----------------
Now the two templates (all_members.html and details.html) can use this master.html template.

This is done by including the master template with the {% extends %} tag, and inserting a title block and a content block:

Members
my_tennis_club/members/templates/all_members.html:

{% extends "master.html" %}

{% block title %}
  My Tennis Club - List of all members
{% endblock %}


{% block content %}
  <h1>Members</h1>
  
  <ul>
    {% for x in mymembers %}
      <li><a href="details/{{ x.id }}">{{ x.firstname }} {{ x.lastname }}</a></li>
    {% endfor %}
  </ul>
{% endblock %}


Follow commit 9

12.Similarily add main page for root "/"
	Add template using master template
	Add view to handle
	Chnage url pattern
	Route from all_members to root

13. Page Not fount
	Important: When DEBUG = False, Django requires you to specify the hosts you will allow this Django project to run from.

In production, this should be replaced with a proper domain name:

ALLOWED_HOSTS = ['yourdomain.com']
 
 For now
Set the debug property to False, and allow the project to run from your local host:

my_tennis_club/my_tennis_club/settings.py:

.
.
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

After above chnages : In the browser window, type 127.0.0.1:8000/masfdfg/ in the address bar, and you will get the built-in 404 template:

Customize the 404 Template
Django will look for a file named 404.html in the templates folder, and display it when there is a 404 error.

If no such file exists, Django shows the "Not Found" that you saw in the example above.

To customize this message, all you have to do is to create a file in the templates folder and name it 404.html, and fill it with whatever you want:

14. Test view

Test View
When testing different aspects of Django, it can be a good idea to have somewhere to test code without destroying the main project.

This is optional off course, but if you like to follow all steps in this tutorial, you should add a test view that is exactly like the one we create below.

Same as other endpoints , /testing create view template urlchange 	


	
	






